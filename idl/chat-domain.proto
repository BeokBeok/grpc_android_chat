// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.grpc.chat";
option java_outer_classname = "ChatDomain";

package model;

import "google/protobuf/timestamp.proto";
import "event-domain.proto";

// common data
message Meta {
    string cid = 1;
    string uid = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message Pagination {
    int32 page_size = 1;
    int32 page_token = 2;
    int32 next_page_token = 3;
}

message Error {
    string code = 1;
    string message = 2;
}

// EventListen ...
message EventListenRequest {
    Meta meta = 1;
}

// Create ...
message CreateRequest {
    Meta meta = 1;
    string peer = 2;
}

message CreateResponse{
    string cid = 1;
    Error error = 2;
}

// Write ...
message WriteRequest {
    Meta meta = 1;
    string tid = 2;
    string message = 3;
}

message WriteResponse {
    Message message = 1;
    Error error = 2;
}

// GetUsers ...
message GetUsersRequest {
    Meta meta = 1;
    Pagination pagination = 2;
}

message GetUsersResponse {
    repeated string uids = 1;
    Pagination pagination = 2;
    Error error = 3;
}

// GetRooms ... 
message GetRoomsRequest {
    Meta meta = 1;
    Pagination pagination = 2;
}

message GetRoomsResponse {
    repeated string cids = 1;
    Pagination pagination = 2;
    Error error = 3;
}

// ChatIn ...
message ReadInfo {
    string uid = 1;
    string read_msg_lid = 2;
}

message ChatInRequest {
    Meta meta = 1;
    string chat_in_checksum = 2;
    string chat_public_checksum = 3;
}

message ChatInResponse {
    string cid = 1;
    repeated string active_uids = 2;
    repeated ReadInfo read_infos = 3;
    string chat_in_checksum = 4;
    string chat_public_checksum = 5;
    Error error = 6;
}

// ChatOut ...
message ChatOutRequest {
    Meta meta = 1;
    string last_msg_lid = 2;
}

message ChatOutResponse {
    string cid = 1;
    string read_msg_lid = 2;
    string sync_chat_checksum = 3;
    Error error = 4;
}

// GetMessages ...
message GetMessagesRequest {
    Meta meta = 1;
    string last_lid = 2;
    Pagination pagination = 3;
}

message GetMessagesResponse {
    repeated Message messages = 1;
    Pagination pagination = 2;
    Error error = 3;
}

// ReceiveAck ...
message ReceiveAckRequest {
    Meta meta = 1;
    string lid = 2;
}

message ReceiveAckResponse {
    bool ok = 1;
    Error error = 2;
}

// ReadAck ...
message ReadAckRequest {
    Meta meta = 1;
    string lid = 2;
}

message ReadAckResponse {
    bool ok = 1;
    Error error = 2;
}

// SyncChats ...
message SyncChatsRequest {
    Meta meta = 1;
    string last_cid = 2;
    int32 fetch_count = 4;
    string sync_chat_checksum = 5;
}

message SyncChatsResponse {
    repeated string del_cids = 1;
    repeated string upd_cids = 2;
    bool eof = 3;
    string sync_chat_checksum = 4;
    string last_cid = 5;
    Error error = 6;
}

// SyncLogs ...
message SyncLogsRequest {
    Meta meta = 1;
    repeated string lid_ranges = 2;
    int32 fetch_count = 3;
    string last_lid = 4;
}

message SyncLogsResponse {
    string cid = 1;
    bool eof = 2;
    repeated Message messages = 3;
    string last_sync_lid = 4;
    string read_msg_lid = 5;
    string sync_chat_checksum = 6;
    Error error = 7;
}

// Leave ...
message  LeaveRequest {
    Meta meta = 1;
    bool block = 2;
}

message LeaveResponse {
    string cid = 1;
    string sync_chat_checksum = 2;
    Message message = 3;
    Error error = 4;
}

// Invite 
message InviteRequest {
    Meta meta = 1;
    repeated string peers = 2;
}

message InviteResponse {
    Message message = 1;
    string sync_chat_checksum = 2;
    Error error = 3;
}

// Delivery ...
message DeliveryRequest {
    Receive recv = 1;
    repeated string uids = 2;
}

message DeliveryResponse {
    repeated string not_found = 1;
    Error error = 2;
}
